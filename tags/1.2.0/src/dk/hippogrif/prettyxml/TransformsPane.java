/*
    Copyright (C) 2005 Jesper Goertz
    All Rights Reserved, http://hippogrif.dk/sw/prettyxml
 
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.
 
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
 
    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

package dk.hippogrif.prettyxml;

import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;

/**
 * A GUI pane for setting the prettyxml transformation property,
 * used by PropertiesPane.
 */
public class TransformsPane extends javax.swing.JPanel {
  
  private MyTableModel model = new MyTableModel();
  private JFileChooser fileChooser = new JFileChooser();
  
  /** Creates new form TransformsPane */
  public TransformsPane() {
    initComponents();
  }
  
  /** Get transformations from GUI as a list of names separated by ;*/
  public String getTransformations() {
    return model.getData();
  }
  
  /** Set transformations in GUI from a list of names separated by ;*/
  public void setTransformations(String transforms) {
    model.setData(transforms);
  }
  
  class MyTableModel extends AbstractTableModel {
    private String[] columnNames = {null};
    private ArrayList data = new ArrayList();
    
    public String getData() {
      StringBuffer sb = new StringBuffer();
      for (int i=0; i<data.size();i++) {
        String s = ((String)data.get(i)).trim();
        if (s.length() > 0) {
          if (i>0) {
            sb.append(';');
          }
          sb.append(s);
        }
      }
      return sb.toString();
    }
    
    public void setData(String s) {
      data.clear();
      if (s != null) {
        String[] sa = s.split(";");
        data.addAll(Arrays.asList(sa));
      }
      this.fireTableDataChanged();
    }
    
    public void addRow(int row) {
      if (row != -1) {
        data.add(row, "");
      } else {
        data.add("");
      }
      this.fireTableRowsInserted(row, row);
    }
    
    public void removeRow(int row) {
      data.remove(row);
      this.fireTableRowsDeleted(row, row);
    }
    
    public int getColumnCount() {
      return columnNames.length;
    }
    
    public int getRowCount() {
      return data.size();
    }
    
    public String getColumnName(int col) {
      return columnNames[col];
    }
    
    public Object getValueAt(int row, int col) {
      return data.get(row);
    }
    
    public Class getColumnClass(int c) {
      return getValueAt(0, c).getClass();
    }
    
    public boolean isCellEditable(int row, int col) {
      return true;
    }
    
    public void setValueAt(Object value, int row, int col) {
      data.set(row, value);
      fireTableCellUpdated(row, col);
    }
    
    public void switchRows(int row) {
      Object s1 = data.get(row);
      Object s2 = data.get(row+1);
      data.set(row, s2);
      data.set(row+1, s1);
      this.fireTableRowsUpdated(row, row+1);
    }
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
  private void initComponents() {
    jScrollPane1 = new javax.swing.JScrollPane();
    table = new dk.hippogrif.prettyxml.GTable();
    jPanel1 = new javax.swing.JPanel();
    insertButton = new javax.swing.JButton();
    addButton = new javax.swing.JButton();
    removeButton = new javax.swing.JButton();
    upButton = new javax.swing.JButton();
    downButton = new javax.swing.JButton();
    selectButton = new javax.swing.JButton();
    browseButton = new javax.swing.JButton();

    setLayout(new java.awt.BorderLayout());

    setMinimumSize(new java.awt.Dimension(200, 100));
    setPreferredSize(new java.awt.Dimension(200, 100));
    jScrollPane1.setBorder(null);
    jScrollPane1.setMinimumSize(new java.awt.Dimension(0, 0));
    table.setModel(model);
    table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
    table.setPreferredSize(new java.awt.Dimension(1000, 60));
    table.setShowVerticalLines(false);
    jScrollPane1.setViewportView(table);

    add(jScrollPane1, java.awt.BorderLayout.CENTER);

    jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 0));

    jPanel1.setMinimumSize(new java.awt.Dimension(100, 20));
    jPanel1.setPreferredSize(new java.awt.Dimension(100, 20));
    insertButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dk/hippogrif/prettyxml/image/RowInsertBefore16.gif")));
    insertButton.setBorder(null);
    insertButton.setMaximumSize(new java.awt.Dimension(20, 20));
    insertButton.setMinimumSize(new java.awt.Dimension(20, 20));
    insertButton.setPreferredSize(new java.awt.Dimension(20, 20));
    insertButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        insertButtonActionPerformed(evt);
      }
    });

    jPanel1.add(insertButton);

    addButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dk/hippogrif/prettyxml/image/RowInsertAfter16.gif")));
    addButton.setBorder(null);
    addButton.setFocusCycleRoot(true);
    addButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
    addButton.setMaximumSize(new java.awt.Dimension(20, 20));
    addButton.setMinimumSize(new java.awt.Dimension(20, 20));
    addButton.setPreferredSize(new java.awt.Dimension(20, 20));
    addButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        addButtonActionPerformed(evt);
      }
    });

    jPanel1.add(addButton);

    removeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dk/hippogrif/prettyxml/image/RowDelete16.gif")));
    removeButton.setBorder(null);
    removeButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
    removeButton.setMaximumSize(new java.awt.Dimension(20, 20));
    removeButton.setMinimumSize(new java.awt.Dimension(20, 20));
    removeButton.setPreferredSize(new java.awt.Dimension(20, 20));
    removeButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        removeButtonActionPerformed(evt);
      }
    });

    jPanel1.add(removeButton);

    upButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dk/hippogrif/prettyxml/image/Up16.gif")));
    upButton.setBorder(null);
    upButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
    upButton.setMaximumSize(new java.awt.Dimension(20, 20));
    upButton.setMinimumSize(new java.awt.Dimension(20, 20));
    upButton.setPreferredSize(new java.awt.Dimension(20, 20));
    upButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        upButtonActionPerformed(evt);
      }
    });

    jPanel1.add(upButton);

    downButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dk/hippogrif/prettyxml/image/Down16.gif")));
    downButton.setBorder(null);
    downButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
    downButton.setMaximumSize(new java.awt.Dimension(20, 20));
    downButton.setMinimumSize(new java.awt.Dimension(20, 20));
    downButton.setPreferredSize(new java.awt.Dimension(20, 20));
    downButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        downButtonActionPerformed(evt);
      }
    });

    jPanel1.add(downButton);

    selectButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dk/hippogrif/prettyxml/image/Bookmarks16.gif")));
    selectButton.setBorder(null);
    selectButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
    selectButton.setMaximumSize(new java.awt.Dimension(20, 20));
    selectButton.setMinimumSize(new java.awt.Dimension(20, 20));
    selectButton.setPreferredSize(new java.awt.Dimension(20, 20));
    selectButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        selectButtonActionPerformed(evt);
      }
    });

    jPanel1.add(selectButton);

    browseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dk/hippogrif/prettyxml/image/Open16.gif")));
    browseButton.setBorder(null);
    browseButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
    browseButton.setMaximumSize(new java.awt.Dimension(20, 20));
    browseButton.setMinimumSize(new java.awt.Dimension(20, 20));
    browseButton.setPreferredSize(new java.awt.Dimension(20, 20));
    browseButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        browseButtonActionPerformed(evt);
      }
    });

    jPanel1.add(browseButton);

    add(jPanel1, java.awt.BorderLayout.SOUTH);

  }
  // </editor-fold>//GEN-END:initComponents
  
  private void insertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertButtonActionPerformed
    int row = table.getSelectedRow();
    if (row == -1) {
      row = 0;
    }
    model.addRow(row);
    table.setRowSelectionInterval(row, row);
  }//GEN-LAST:event_insertButtonActionPerformed
  
  private void selectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectButtonActionPerformed
    int row = table.getSelectedRow();
    if (row > -1) {
      String s = (String)JOptionPane.showInputDialog(
              this,
              "Select a transformation",
              "Transformations",
              JOptionPane.PLAIN_MESSAGE,
              null,
              PrettyPrint.getTransformations(),
              PrettyPrint.getTransformations()[0]);
      if (s != null) {
        model.setValueAt(s, row, 0);
      }
    }
  }//GEN-LAST:event_selectButtonActionPerformed
  
  private void downButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downButtonActionPerformed
    int row = table.getSelectedRow() + 1;
    if (row > 0 && row < model.getRowCount()) {
      model.switchRows(row-1);
      table.setRowSelectionInterval(row, row);
    }
  }//GEN-LAST:event_downButtonActionPerformed
  
  private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
    int row = table.getSelectedRow();
    if (row > -1) {
      int returnVal = fileChooser.showOpenDialog(this);
      if (returnVal == JFileChooser.APPROVE_OPTION) {
        model.setValueAt(fileChooser.getSelectedFile().getPath(), row, 0);
//        markDirty();
      }
    }
  }//GEN-LAST:event_browseButtonActionPerformed
  
  private void upButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upButtonActionPerformed
    int row = table.getSelectedRow() - 1;
    if (row > -1) {
      model.switchRows(row);
      table.setRowSelectionInterval(row, row);
    }
  }//GEN-LAST:event_upButtonActionPerformed
  
  private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
    int row = table.getSelectedRow();
    if (row != -1) {
      model.removeRow(row);
      if (row == model.getRowCount()) {
        row--;
      }
      if (row != -1) {
        table.setRowSelectionInterval(row, row);
      }
    }
  }//GEN-LAST:event_removeButtonActionPerformed
  
  private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
    int row = table.getSelectedRow() + 1;
    if (row == 0) {
      row = table.getRowCount();
    }
    model.addRow(row);
    table.setRowSelectionInterval(row, row);
  }//GEN-LAST:event_addButtonActionPerformed
  
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton addButton;
  private javax.swing.JButton browseButton;
  private javax.swing.JButton downButton;
  private javax.swing.JButton insertButton;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JButton removeButton;
  private javax.swing.JButton selectButton;
  private dk.hippogrif.prettyxml.GTable table;
  private javax.swing.JButton upButton;
  // End of variables declaration//GEN-END:variables
  
}
