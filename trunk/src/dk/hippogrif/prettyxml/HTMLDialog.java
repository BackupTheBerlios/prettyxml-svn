/*
    Copyright (C) 2005 Jesper Goertz
    All Rights Reserved, http://hippogrif.dk/sw/prettyxml
 
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.
 
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
 
    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

package dk.hippogrif.prettyxml;

import java.awt.Dimension;
import java.net.URL;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JEditorPane;
import javax.swing.JOptionPane;
import javax.swing.event.HyperlinkEvent;
import javax.swing.text.html.HTMLDocument;
import javax.swing.text.html.HTMLFrameHyperlinkEvent;

/**
 * Renders an HTML page in a dialog window with hyperlinks and history.
 * The history is made available by forward, back and home buttons.
 *
 * @author  Jesper Goertz
 */
public class HTMLDialog extends javax.swing.JDialog {
  private Logger logger = Logger.getLogger(getClass().getName());
  private URL home;
  private History history;
  private Dimension dimension;
  
  class History {
    private int maxPage;
    private int currentPage = -1;
    private int lastPage = -1;
    private ArrayList pages = new ArrayList(maxPage+1);
    
    public History(int size) {
      maxPage = size - 1;
    }
    
    public void clear() {
      currentPage = -1;
      lastPage = -1;
    }
    
    public boolean hasNext() {
      return currentPage < lastPage;
    }
    
    public boolean hasPrev() {
      return currentPage > 0;
    }
    
    public URL next() {
      if (hasNext()) {
        return (URL)pages.get(++currentPage);
      }
      return null;
    }
    
    public URL prev() {
      if (hasPrev()) {
        return (URL)pages.get(--currentPage);
      }
      return null;
    }
    
    public void add(URL url) {
      if (currentPage < maxPage) {
        lastPage = ++currentPage;
      } else {
        pages.remove(0);
      }
      pages.add(currentPage, url);
    }
  }
  
  /**
   * Creates a new HTMLDialog window.
   * 
   * @param parent window parent
   * @param title window title
   * @param url home page shown
   * @param historySize max no of pages in history
   * @param windowSize dimension of window
   */
  public HTMLDialog(java.awt.Frame parent, String title, URL url, int historySize, Dimension windowSize) {
    super(parent, title);
    home = url;
    history = new History(historySize);
    this.dimension = windowSize;
    this.setLocationRelativeTo(parent);
    initComponents();
  }
  
  public void show() {
    if (!this.isShowing()) {
      history.clear();
      newPage(home);
    }
    super.show();
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    jScrollPane1 = new javax.swing.JScrollPane();
    helpPane = new javax.swing.JEditorPane();
    controlPanel = new javax.swing.JPanel();
    prevButton = new javax.swing.JButton();
    nextButton = new javax.swing.JButton();
    homeButton = new javax.swing.JButton();
    urlTextField = new javax.swing.JTextField();

    jScrollPane1.setPreferredSize(new java.awt.Dimension(400, 400));
    helpPane.setEditable(false);
    helpPane.setMinimumSize(new java.awt.Dimension(400, 400));
    newPage(home);
    helpPane.addHyperlinkListener(new javax.swing.event.HyperlinkListener() {
      public void hyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {
        HTMLDialog.this.hyperlinkUpdate(evt);
      }
    });

    jScrollPane1.setViewportView(helpPane);

    getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

    controlPanel.setLayout(new java.awt.GridBagLayout());

    prevButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dk/hippogrif/prettyxml/image/Back16.gif")));
    prevButton.setToolTipText("back");
    prevButton.setPreferredSize(new java.awt.Dimension(20, 20));
    prevButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        prevButtonActionPerformed(evt);
      }
    });

    controlPanel.add(prevButton, new java.awt.GridBagConstraints());

    nextButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dk/hippogrif/prettyxml/image/Forward16.gif")));
    nextButton.setToolTipText("forward");
    nextButton.setPreferredSize(new java.awt.Dimension(20, 20));
    nextButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        nextButtonActionPerformed(evt);
      }
    });

    controlPanel.add(nextButton, new java.awt.GridBagConstraints());

    homeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dk/hippogrif/prettyxml/image/Home16.gif")));
    homeButton.setToolTipText("home");
    homeButton.setMaximumSize(new java.awt.Dimension(25, 25));
    homeButton.setMinimumSize(new java.awt.Dimension(25, 25));
    homeButton.setPreferredSize(new java.awt.Dimension(20, 20));
    homeButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        homeButtonActionPerformed(evt);
      }
    });

    controlPanel.add(homeButton, new java.awt.GridBagConstraints());

    urlTextField.setBackground(new java.awt.Color(255, 255, 255));
    urlTextField.setEditable(false);
    urlTextField.setToolTipText("url");
    urlTextField.setMinimumSize(new java.awt.Dimension(200, 20));
    urlTextField.setPreferredSize(new java.awt.Dimension(200, 20));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 0);
    controlPanel.add(urlTextField, gridBagConstraints);

    getContentPane().add(controlPanel, java.awt.BorderLayout.NORTH);

    pack();
  }
  // </editor-fold>//GEN-END:initComponents
    
  private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
    URL url = history.next();
    if (url != null) {
      if (setPage(url)) {
        enableButtons();
      } else {
        history.prev();
      }
    }
  }//GEN-LAST:event_nextButtonActionPerformed
  
  private void prevButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevButtonActionPerformed
    URL url = history.prev();
    if (url != null) {
      if (setPage(url)) {
        enableButtons();
      } else {
        history.next();
      }
    }
  }//GEN-LAST:event_prevButtonActionPerformed
  
  private void message(String title, Exception e) {
    e.printStackTrace(System.err);
    JOptionPane.showMessageDialog(this, e.getMessage(), this.getTitle(), JOptionPane.ERROR_MESSAGE);
  }
  
  private void enableButtons() {
    nextButton.setEnabled(history.hasNext());
    prevButton.setEnabled(history.hasPrev());
  }
  
  private void newPage(URL url) {
    if (setPage(url)) {
      history.add(url);
      enableButtons();
    }
  }
  
  private boolean setPage(URL url) {
    try {
      helpPane.setPage(url);
      urlTextField.setText(url.toString());
      return true;
    } catch (Exception e){
      logger.log(Level.FINE, "setPage", e);
      message(this.getTitle(), e);
    }
    return false;
  }
  
  private void homeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeButtonActionPerformed
    newPage(home);
  }//GEN-LAST:event_homeButtonActionPerformed
  
  private void hyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {//GEN-FIRST:event_hyperlinkUpdate
    if (evt.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
      JEditorPane pane = (JEditorPane) evt.getSource();
      if (evt instanceof HTMLFrameHyperlinkEvent) {
        HTMLFrameHyperlinkEvent  event = (HTMLFrameHyperlinkEvent)evt;
        HTMLDocument doc = (HTMLDocument)pane.getDocument();
        doc.processHTMLFrameHyperlinkEvent(event);
      } else {
        newPage(evt.getURL());
      }
    }
  }//GEN-LAST:event_hyperlinkUpdate
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JPanel controlPanel;
  private javax.swing.JEditorPane helpPane;
  private javax.swing.JButton homeButton;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JButton nextButton;
  private javax.swing.JButton prevButton;
  private javax.swing.JTextField urlTextField;
  // End of variables declaration//GEN-END:variables
  
}
